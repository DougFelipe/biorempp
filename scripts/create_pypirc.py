#!/usr/bin/env python3
"""
PyPI Configuration File Creator

This script creates a properly configured .pypirc file for PyPI and TestPyPI uploads.
It handles token insertion, file placement, and security settings automatically.

Usage:
    python scripts/create_pypirc.py --testpypi-token "pypi-YOUR_TOKEN"
    python scripts/create_pypirc.py --pypi-token "pypi-TOKEN" \\
                                    --testpypi-token "pypi-TOKEN"
    python scripts/create_pypirc.py --interactive
"""

import sys
import os
import platform
import getpass
from pathlib import Path


class Colors:
    """ANSI color codes for terminal output."""
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'


def print_success(message):
    """Print a success message."""
    print(f"{Colors.GREEN}‚úÖ {message}{Colors.END}")


def print_warning(message):
    """Print a warning message."""
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.END}")


def print_error(message):
    """Print an error message."""
    print(f"{Colors.RED}‚ùå {message}{Colors.END}")


def print_info(message):
    """Print an info message."""
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {message}{Colors.END}")


def get_pypirc_path():
    """Get the correct path for the .pypirc file."""
    return Path.home() / ".pypirc"


def create_pypirc_content(pypi_token=None, testpypi_token=None):
    """
    Create the content for the .pypirc file.
    
    Args:
        pypi_token (str): PyPI production token
        testpypi_token (str): TestPyPI token
        
    Returns:
        str: Content for the .pypirc file
    """
    pypi_password = pypi_token or "YOUR_PYPI_TOKEN_HERE"
    testpypi_password = testpypi_token or "YOUR_TESTPYPI_TOKEN_HERE"
    
    content = f"""# PyPI Configuration File
# Generated by biorempp create_pypirc.py script
#
# SECURITY WARNING: This file contains authentication tokens
# - Never commit this file to version control
# - Keep file permissions restricted (chmod 600 on Unix)
# - Store tokens securely

[distutils]
index-servers =
    pypi
    testpypi

[pypi]
repository = https://upload.pypi.org/legacy/
username = __token__
password = {pypi_password}

[testpypi]
repository = https://test.pypi.org/legacy/
username = __token__
password = {testpypi_password}

# Usage:
# Upload to TestPyPI: twine upload --repository testpypi dist/*
# Upload to PyPI: twine upload --repository pypi dist/*
#
# Token URLs:
# PyPI: https://pypi.org/manage/account/#api-tokens
# TestPyPI: https://test.pypi.org/manage/account/#api-tokens
"""
    
    return content


def validate_token(token, token_type):
    """
    Validate that a token looks correct.
    
    Args:
        token (str): Token to validate
        token_type (str): Type of token (for error messages)
        
    Returns:
        bool: True if token looks valid
    """
    if not token:
        return False
    
    if not token.startswith('pypi-'):
        print_error(f"{token_type} token must start with 'pypi-'")
        return False
    
    if len(token) < 20:
        print_error(f"{token_type} token seems too short")
        return False
    
    return True


def backup_existing_pypirc():
    """Create a backup of existing .pypirc file."""
    pypirc_path = get_pypirc_path()
    
    if not pypirc_path.exists():
        return True
    
    timestamp = __import__('datetime').datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_path = pypirc_path.with_suffix(f'.pypirc.backup_{timestamp}')
    
    try:
        import shutil
        shutil.copy2(pypirc_path, backup_path)
        print_success(f"Existing .pypirc backed up to: {backup_path}")
        return True
    except Exception as e:
        print_error(f"Failed to backup existing .pypirc: {e}")
        return False


def set_file_permissions(file_path):
    """Set appropriate permissions for the .pypirc file."""
    if platform.system() != "Windows":
        try:
            os.chmod(file_path, 0o600)
            print_success("File permissions set to 600 (owner read/write only)")
        except Exception as e:
            print_warning(f"Could not set file permissions: {e}")
    else:
        print_info("On Windows, ensure the file is in your user directory "
                   "with appropriate permissions")


def write_pypirc_file(content, force=False):
    """
    Write the .pypirc file with the given content.
    
    Args:
        content (str): Content to write
        force (bool): Whether to overwrite existing file
        
    Returns:
        bool: True if successful
    """
    pypirc_path = get_pypirc_path()
    
    # Check if file exists
    if pypirc_path.exists() and not force:
        print_error(f".pypirc already exists at: {pypirc_path}")
        print("Use --force to overwrite")
        return False
    
    # Backup existing file
    if pypirc_path.exists():
        if not backup_existing_pypirc():
            return False
    
    try:
        # Write the file
        with open(pypirc_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # Set permissions
        set_file_permissions(pypirc_path)
        
        print_success(f".pypirc file created successfully at: {pypirc_path}")
        return True
        
    except Exception as e:
        print_error(f"Failed to write .pypirc file: {e}")
        return False


def interactive_mode():
    """Interactive mode for token collection."""
    print(f"\n{Colors.BOLD}üîê Interactive PyPI Configuration{Colors.END}")
    print("=" * 40)
    
    print("\nThis will help you create a .pypirc file with your PyPI tokens.")
    print("You can get tokens from:")
    print("  PyPI: https://pypi.org/manage/account/#api-tokens")
    print("  TestPyPI: https://test.pypi.org/manage/account/#api-tokens")
    
    print(f"\n{Colors.YELLOW}Note: Tokens will be hidden as you type{Colors.END}")
    
    # Get TestPyPI token (required)
    while True:
        testpypi_token = getpass.getpass("\nEnter your TestPyPI token (required): ")
        if validate_token(testpypi_token, "TestPyPI"):
            break
        print("Please enter a valid TestPyPI token")
    
    # Get PyPI token (optional)
    pypi_token = None
    get_pypi = input("\nDo you want to add PyPI production token now? [y/N]: ")
    if get_pypi.lower() in ['y', 'yes']:
        while True:
            pypi_token = getpass.getpass("Enter your PyPI production token: ")
            if validate_token(pypi_token, "PyPI"):
                break
            print("Please enter a valid PyPI token")
    
    return pypi_token, testpypi_token


def show_next_steps(pypi_token, testpypi_token):
    """Show next steps after .pypirc creation."""
    print(f"\n{Colors.BOLD}üéâ Configuration Complete!{Colors.END}")
    
    if not pypi_token:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è  Next Steps:{Colors.END}")
        print("1. Get your PyPI production token from:")
        print("   https://pypi.org/manage/account/#api-tokens")
        print("2. Edit your .pypirc file and replace 'YOUR_PYPI_TOKEN_HERE'")
        print(f"   File location: {get_pypirc_path()}")
    
    if 'YOUR_TESTPYPI_TOKEN_HERE' in (testpypi_token or ''):
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è  TestPyPI Token Missing:{Colors.END}")
        print("1. Get your TestPyPI token from:")
        print("   https://test.pypi.org/manage/account/#api-tokens")
        print("2. Edit your .pypirc file and replace 'YOUR_TESTPYPI_TOKEN_HERE'")
    
    print(f"\n{Colors.BOLD}üì¶ Ready to Upload:{Colors.END}")
    print("# Test upload (recommended first):")
    print("python scripts/upload_to_testpypi.py")
    print("")
    print("# Or manually:")
    print("python -m build")
    print("twine upload --repository testpypi dist/*")


def main():
    """Main function."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Create .pypirc file for PyPI authentication",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Interactive mode (recommended)
  python scripts/create_pypirc.py --interactive

  # TestPyPI only (for initial testing)
  python scripts/create_pypirc.py --testpypi-token "pypi-YOUR_TOKEN"

  # Both PyPI and TestPyPI
  python scripts/create_pypirc.py \\
    --pypi-token "pypi-YOUR_PYPI_TOKEN" \\
    --testpypi-token "pypi-YOUR_TESTPYPI_TOKEN"

Token Generation:
  PyPI: https://pypi.org/manage/account/#api-tokens
  TestPyPI: https://test.pypi.org/manage/account/#api-tokens
        """
    )
    
    parser.add_argument(
        "--pypi-token",
        help="PyPI production token (starts with 'pypi-')"
    )
    parser.add_argument(
        "--testpypi-token",
        help="TestPyPI token (starts with 'pypi-')"
    )
    parser.add_argument(
        "--interactive",
        action="store_true",
        help="Interactive mode for token input"
    )
    parser.add_argument(
        "--force",
        action="store_true",
        help="Overwrite existing .pypirc file"
    )
    parser.add_argument(
        "--show-path",
        action="store_true",
        help="Show .pypirc file path and exit"
    )
    
    args = parser.parse_args()
    
    # Show path and exit
    if args.show_path:
        print(f"üìÅ .pypirc file location: {get_pypirc_path()}")
        print(f"üè† Home directory: {Path.home()}")
        return
    
    print(f"{Colors.BOLD}üîß PyPI Configuration Creator{Colors.END}")
    print("=" * 35)
    
    pypi_token = args.pypi_token
    testpypi_token = args.testpypi_token
    
    # Interactive mode
    if args.interactive:
        pypi_token, testpypi_token = interactive_mode()
    
    # Validate tokens if provided
    if pypi_token and not validate_token(pypi_token, "PyPI"):
        sys.exit(1)
    
    if testpypi_token and not validate_token(testpypi_token, "TestPyPI"):
        sys.exit(1)
    
    # If no tokens provided and not interactive, show help
    if not pypi_token and not testpypi_token and not args.interactive:
        print_error("No tokens provided. Use --interactive or provide tokens.")
        print("Run with --help for examples.")
        sys.exit(1)
    
    # Create content
    content = create_pypirc_content(pypi_token, testpypi_token)
    
    # Write file
    success = write_pypirc_file(content, force=args.force)
    
    if success:
        show_next_steps(pypi_token, testpypi_token)
    else:
        sys.exit(1)


if __name__ == "__main__":
    main()
